# Model selection
# Options: SimpleCNN, DeepCNN, TransferLearningModel
model_type: "DeepCNN"

# Model parameters
input_shape: [224, 224, 1]
num_classes: 4

# Base model for transfer learning
# Options: ResNet50, DenseNet121, EfficientNetB0
base_model: "DenseNet121"
freeze_base: true

# Training parameters
training:
  epochs: 50
  initial_learning_rate: 0.001
  optimizer: "adam"  # Options: adam, sgd, rmsprop
  
  # Learning rate scheduler
  scheduler:
    type: "reduce_on_plateau"  # Options: reduce_on_plateau, step_decay, cosine
    patience: 5
    factor: 0.5
    min_lr: 0.00001
  
  # Early stopping
  early_stopping:
    enabled: true
    patience: 10
    min_delta: 0.001
  
  # Checkpointing
  checkpointing:
    save_best_only: true
    save_freq: 5  # Save every N epochs

# Regularization
regularization:
  dropout_rate: 0.5
  l2_rate: 0.001
  batch_normalization: true
  
# Fine-tuning (for transfer learning)
fine_tuning:
  enabled: true
  unfreeze_after_epoch: 10  # Unfreeze base model after N epochs
  unfreeze_layers: 30  # Number of layers to unfreeze from the end
  fine_tuning_lr: 0.0001  # Learning rate for fine-tuning

# Model evaluation
evaluation:
  metrics: ["accuracy", "precision", "recall", "f1", "auc"]
  visualize_predictions: true
  num_samples_to_visualize: 20
  
# Model export
export:
  format: "saved_model"  # Options: saved_model, h5, tflite
  quantize: false  # Whether to quantize the model for deployment